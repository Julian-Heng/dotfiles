#############################
##### Aliases/Functions #####
#############################
# shellcheck disable=2139,2148,2154

gcll()
{
    local -a args
    local -a repo_list
    local repo

    while (($# > 0)); do
        case "$1" in
            "http"*) repo_list+=("$1") ;;
            *) args+=("$1") ;;
        esac
        shift
    done

    for repo in "${repo_list[@]}"; do
        git clone "${repo}" "${args[@]}"
    done
}

gdiff()
{
    local -a args

    args=("--color=always" "$@")

    if (($(wc -l < <(git --no-pager diff "${args[@]}")) > LINES)); then
        less -RSK < <(git --no-pager diff "${args[@]}")
    else
        less -RSFXK < <(git --no-pager diff "${args[@]}")
    fi
}

glog()
{
    local -a format
    local -a args

    format=(
        "┌[%C(bold blue)%H%C(reset)]%C(auto)%d%C(reset)%n"
        "└──[%C(bold cyan)%aD%C(reset)]: %C(bold green)%ar%C(reset)%n%n"
        "%w(0,4,4)Author:  %an %C(dim white)<%ae>%C(reset)%n"
        "%w(0,4,4)Subject: %s%n"
        "%w(0,4,4)%+b%n"
    )

    IFS="" format_str="${format[*]}"
    args=("--color=always" "--graph" "--format=format:${format_str}" "$@")

    git_out="$(git --no-pager log "${args[@]}" | awk 'NF > 0 {blank=0} NF == 0 {blank++} blank < 2')"

    if (($(wc -l <<< "${git_out}") > LINES)); then
        less -RS <<< "${git_out}"
    else
        less -RSFX <<< "${git_out}"
    fi
}

glog2()
{
    local -a format
    local -a args

    format=(
        "%C(bold blue)%h%C(reset) %C(bold yellow)%ar%C(reset)%x09| "
        "%C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)"
    )

    IFS="" format_str="${format[*]}"
    args=("--color=always" "--format=format:${format_str}" "$@")

    git_out="$(git --no-pager log "${args[@]}")"

    if (($(wc -l <<< "${git_out}") > LINES)); then
        less -RS <<< "${git_out}"
    else
        less -RSFX <<< "${git_out}"
    fi
}

glog3()
{
    local -a format
    local -a args

    format=(
        "%C(bold blue)%h%C(reset) %C(bold yellow)%ar%C(reset) | "
        "%C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)"
    )

    IFS="" format_str="${format[*]}"
    args=("--color=always" "--graph" "--format=format:${format_str}" "$@")

    git_out="$(git --no-pager log "${args[@]}")"

    if (($(wc -l <<< "${git_out}") > LINES)); then
        less -RS <<< "${git_out}"
    else
        less -RSFX <<< "${git_out}"
    fi
}

glog4()
{
    local -a args

    args=("--color=always" "--graph" "$@")

    git_out="$(git --no-pager log "${args[@]}")"

    if (($(wc -l <<< "${git_out}") > LINES)); then
        less -RS <<< "${git_out}"
    else
        less -RSFX <<< "${git_out}"
    fi
}

cb()
{
    cd "$@" "${OLDPWD}" || return
}

man()
{
    MANWIDTH="$((${COLUMNS:-100} > 100 ? 100 : COLUMNS))" command man "$@"
}

catm()
{
    [[ ! "${COLUMNS}" ]] && \
        shopt -s checkwinsize; (:;:)

    printf "\\n"
    eval printf "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"
    printf "%s\\n" "$1"
    eval printf "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"
    printf "\\n"
    cat "$1"

    printf "\\n"
    eval printf "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"
    printf "\\n"

    for i in "${@:1}"; do
        printf "\\n"
        eval printf "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"
        printf "\\n%s\\n" "$i"
        eval printf "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"
        printf "\\n"
        cat "$i"

        printf "\\n"
        eval printf "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"
        printf "\\n"
    done
}

mpv-loop()
{
    (($# > 2)) && \
        if (($# > 3)); then
            mpv "$1" --start "$2" \
                     --ab-loop-a "$2" \
                     --ab-loop-b "$3" \
                     --audio-pitch-correction=no \
                     --af-add=scaletempo=speed=both \
                     --speed="$4" \
                     "${@:4}"
        else
            mpv "$1" --start "$2" --ab-loop-a "$2" --ab-loop-b "$3" "${@:3}"
        fi
}

mpv-speed()
{
    (($# > 1)) && \
        mpv "$1" --audio-pitch-correction=no \
                 --af-add=scaletempo=speed=both \
                 --speed="$2" \
                 "${@:2}"
}

alias dl="aria2c --dir=${HOME}/Downloads/"

alias gp="git pull"
alias gpp="git push"
alias grm="git rm"
alias gcl="git clone"
alias gstat="git status --branch"

alias grep="grep --color=always"

alias 7zcomp="
    7z a -t7z \
         -m0=lzma2 \
         -mx=9 \
         -aoa \
         -mfb=64 \
         -md=32m \
         -ms=on \
         -mhe"

alias yt2mp3="
    youtube-dl  --output ${HOME}/Downloads/ \
                -x \
                --audio-format mp3 \
                --audio-quality 0 \
                -o '%(playlist_index)s %(title)s.%(ext)s' \
                -v"

alias longfetch="neofetch -L; neofetch --off"

alias l="ls"

case "${distro}" in
    "MacOS"|"FreeBSD")
        alias ls="ls -G"
        alias ll="ls -G -l"
        alias la="ls -G -a"
        alias lal="ls -G -a -l"
    ;;

    *)
        alias ls="ls --color --classify"
        alias ll="ls --color --classify -l"
        alias la="ls --color --classify -a"
        alias lal="ls --color --classify -a -l"
        alias open="xdg-open"
    ;;
esac

case "${distro}" in
    "MacOS") alias update="brew -v update && brew -v upgrade" ;;
    "Ubuntu"*|"Debian"*|"Raspbian"*|"LinuxMint"*)
        alias update="sudo apt update && sudo apt upgrade"
    ;;

    "Antergos"*|"Arch"*)
        if type -p yay > /dev/null; then
            alias update="yay"
        else
            alias update="sudo pacman -Syu"
        fi
    ;;

    "Fedora"|"CentOS"*)
        if type -p dnf > /dev/null; then
            alias update="sudo dnf update"
        elif type -p yum > /dev/null; then
            alias update="sudo yum update"
        else
            printf "%s\\n" "${fb[1]}Error:${reset} Cannot find dnf or yum, 'update' alias not set" >&2
        fi
    ;;

    "VoidLinux") alias update="sudo xbps-install -Su" ;;
    "Gentoo")
        alias update='
            printf "%s\\n" "Do it yourself"
            printf "%s\\n" "=============="
            printf "%s\\n" "# emerge --sync"
            printf "%s\\n" "# emerge-webrsync"
            printf "%s\\n" "# emerge --update --changed-use --deep --ask --with-bdeps=y @world"
            printf "%s\\n" "# emerge --ask --verbose --depclean"'
    ;;

    "FreeBSD") alias update="sudo pkg update && sudo pkg upgrade" ;;
    "Windows") alias update="choco upgrade all" ;;
    "") printf "%s\\n" "${fb[1]}Error:${reset} Cannot detect distro, 'update' alias not set" >&2 ;;
    *) printf "%s\\n" "${fb[1]}Error:${reset} Unknown distro, 'update' alias not set" >&2 ;;
esac
