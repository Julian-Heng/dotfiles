##################
##### Prompt #####
##################
# shellcheck disable=2148,2154

prompter()
{
    local exit="$?"

    __get_git_branch_status()
    {
        [[ "$1" == *"$2 "[[:digit:]]* ]] && {
            status="${1##*$2}"
            status="${status%%,*}"
            status="${status/]}"
            status="${status//[[:space:]]}"
            printf "%s" "${status}"
        }
    }

    __get_git_branch()
    {
        case "$1" in
            *"No commits"*|*"Initial commit"*)
                branch="NA"
            ;;

            *"no branch"*)
                branch="${1%%\(*}"
                branch="${branch//#}"
                branch="${branch//[[:space:]]}"
            ;;

            *)
                branch="${1%%\...*}"
                branch="${branch//#}"
                branch="${branch//[[:space:]]}"
            ;;
        esac
        printf "%s" "${branch}"
    }

    _git_prompt()
    {
        unset _git_status
        unset num_stages
        unset num_changed
        unset num_conflicts
        unset num_untracked

        # Git status symbols and algorithm referenced from
        #   - https://github.com/magicmonty/bash-git-prompt/blob/master/gitstatus.sh
        #   - https://git-scm.com/docs/git-status

        { [[ -d ".git" ]] || git rev-parse --git-dir > /dev/null 2>&1; } && {
            while IFS=$'\n' read -r i; do
                status="${i:0:2}"
                while [[ -n "${status}" ]]; do
                    case "${status}" in
                        "##")
                            _git_branch="$(__get_git_branch "${i}")"
                            _git_behind="$(__get_git_branch_status "${i}" "behind")"
                            _git_ahead="$(__get_git_branch_status "${i}" "ahead")"
                            break
                        ;;

                        "??")       ((num_untracked++)); break ;;
                        "U"?|?"U"|\
                        "DD"|"AA")  ((num_conflicts++)); break ;;
                        ?"M"|?"D")  ((num_changed++)) ;;
                        ?" ") ;;
                        "U")        ((num_conflicts++)) ;;
                        " ") ;;
                        *)          ((num_staged++)) ;;
                    esac
                    status="${status:0:${#status}-1}"
                done
            done < <(git status --porcelain --branch)

            git_prompt="-[${c2}${_git_branch}${reset}"

            [[ "${_git_behind}" ]] && \
                git_prompt="${git_prompt}${fb[7]}↓${_git_behind}${reset}"

            [[ "${_git_ahead}" ]] && \
                git_prompt="${git_prompt}${fb[7]}↑${_git_ahead}${reset}"

            ((num_conflicts > 0)) && \
                _git_status="${_git_status}${f[1]}✖${num_conflicts}${reset}"

            ((num_changed > 0)) && \
                _git_status="${_git_status}${f[4]}✚${num_changed}${reset}"

            ((num_staged > 0)) && \
                _git_status="${_git_status}${f[6]}●${num_staged}${reset}"

            ((num_untracked > 0)) && \
                _git_status="${_git_status}${bold}…${num_untracked}${reset}"

            [[ "${_git_status}" ]] && \
                git_prompt="${git_prompt}|${_git_status}"

            git_prompt="${git_prompt}]"
        }

        printf "%s" "${git_prompt}"
    }

    dir_prompt()
    {
        unset _PWD
        cwd="${PWD}"
        cwd="${cwd//${HOME}/'~'}"
        cwd="${cwd#/}"

        mapfile -d "/" -t parts < <(printf "%s" "${cwd:-/}")

        for part in "${parts[@]::${#parts[@]}-1}"; do
            count="0"
            unset in_PWD
            unset in_part
            mapfile -d ' ' -t in_part <<< "${part}"
            for i in "${in_part[@]}"; do
                if [[ "${i:0:1}" == "." ]] && ((count == 0)); then
                    in_PWD="${in_PWD}${i:0:2}"
                    ((count++))
                else
                    in_PWD="${in_PWD}${i:0:1}"
                fi
            done
            _PWD="${_PWD}/${in_PWD}"
        done

        _PWD="${_PWD}/${parts[-1]}"

        [[ "${_PWD:1:1}" == "~" ]] && \
            _PWD="${_PWD#/}"

        ((${#_PWD} > 20)) && \
            _PWD="${parts[-1]}"

        printf "%s" "${_PWD:-/}"
    }

    local c1
    local c2
    local userhost
    local head
    local dir
    local git
    local -a prompt_line

    unset prompt_line
    unset PS1

    if ((EUID == 0)); then
        c1="${fb[1]}"
        c2="${fb[1]}"
        head="#"
    else
        c1="${fb[2]}"
        c2="${fb[4]}"
        head="$"
    fi

    ((exit != 0)) && \
        head="[${exit}]${head}"

    user="${USER:-\\u}"
    host="${HOSTNAME:-\\w}"
    host="${host%%.*}"
    userhost="${c1}${user}${reset}@${c1}${host}${reset}"
    dir="${c2}$(dir_prompt)${reset}"
    git="$(_git_prompt)"

    prompt_line+=("┌[${userhost}]: (${dir})${git}")
    prompt_line+=("└${head} ")
    IFS=$'\n' PS1="${prompt_line[*]}"
    export PS1

    unset __get_git_branch_status
    unset __get_git_branch
    unset _git_prompt
    unset dir_prompt
}

PROMPT_COMMAND="prompter; history -a"
