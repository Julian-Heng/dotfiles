##########################
##### Sourcing files #####
##########################
# shellcheck disable=1090,2148,2154

secure_source()
{
    local file="$1"
    if [[ -f "${file}" ]]; then
        source "${file}"
    else
        printf "%s\\n" "${fb[1]}Error:${reset} \"${file}\" is missing"
    fi
}

get_distro()
{
    case "${OSTYPE:-$(uname -s)}" in
        "Darwin"|"darwin"*)
            distro="MacOS"
        ;;

        "Linux"|"linux"*)
            if [[ -f "/etc/lsb-release" ]]; then
                distro="$(awk '/DISTRIB_ID/ {print $1}' /etc/lsb-release)"
                distro="${distro/DISTRIB_ID=/}"
            elif [[ -f "/etc/os-release" ]]; then
                distro="$(awk -F "=" '/^NAME/ {print $2; exit}' /etc/os-release)"
                distro="${distro/NAME=/}"
                distro="${distro//\"/}"
            fi
        ;;

        "FreeBSD"|"freebsd"*)
            distro="FreeBSD"
        ;;

        "MSYS"*|"msys")
            distro="Windows"
        ;;

        "")
            printf "%s\\n" "Error: Cannot detect os" >&2
        ;;
    esac
    printf "%s" "${distro}"
}

get_full_path()
{
    target="$1"

    if [[ -f "${target}" ]]; then
        filename="${target##*/}"
        [[ "${filename}" == "${target}" ]] && \
            target="./${target}"
        target="${target%/*}"
        cd "${target}" || exit
        full_path="${PWD}/${filename}"
    elif [[ -d "${target}" ]]; then
        cd "${target}" || exit
        full_path="${PWD}"
    fi

    printf "%s" "${full_path%/}"
}

get_module_dir()
{
    if [[ "${distro}" != "Windows" ]]; then
        module_dir="$(awk -F' -> ' '{printf "%s", $2}' <(ls -l "${BASH_SOURCE[0]}"))"
        module_dir="${module_dir%/*}/modules"
    else
        module_dir="${HOME}/.dotfiles/bashrc/modules"
    fi
    printf "%s" "${module_dir}"
}

main()
{
    distro="$(get_distro)"
    module_dir="$(get_module_dir)"

    modules=(
        "${module_dir}/colors"
        "${module_dir}/aliases"
        "${module_dir}/env_var"
        "${module_dir}/prompt"
    )

    ! type -p __load_completion > /dev/null && \
        if [[ -f "/usr/local/share/bash-completion/bash_completion" ]]; then
            modules+=("/usr/local/share/bash-completion/bash_completion")
        elif [[ -f "/usr/share/bash-completion/bash_completion" ]]; then
            modules+=("/usr/share/bash-completion/bash_completion")
        fi

    for i in "${modules[@]}"; do
        secure_source "${i}"
    done

    unset secure_source
    unset get_distro
    unset get_full_path
    unset get_module_path
    unset main
}

main
