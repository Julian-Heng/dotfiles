##########################
##### Sourcing files #####
##########################
# shellcheck disable=1090,2148,2154

function secure_source
{
    local file="$1"
    if [[ -f "${file}" ]]; then
        source "${file}"
    else
        printf "%s\\n" "${fb[1]}Error:${reset} \"${file}\" is missing"
    fi
}

function detect_os
(
    case "${OSTYPE:-$(uname -s)}" in
        "Darwin"|"darwin"*)
            : "MacOS"
        ;;

        "Linux"|"linux"*)
            if type -p lsb_release > /dev/null; then
                : "$(lsb_release -si)"
            elif [[ -f "/etc/lsb-release" ]]; then
                : "$(awk '/DISTRIB_ID/ {print $1}' /etc/lsb-release)"
                : "${_/DISTRIB_ID=/}"
            elif [[ -f "/etc/os-release" ]]; then
                : "$(awk -F "=" '/NAME/ {print $2; exit}' /etc/os-release)"
                : "${_/NAME=/}"
                : "${_//\"/}"
            fi
        ;;

        "FreeBSD"|"freebsd"*)
            : "FreeBSD"
        ;;

        "MSYS"*|"msys")
            : "Windows"
        ;;

        "")
            printf "%s\\n" "Error: Cannot detect os"
        ;;
    esac
    printf "%s" "${_}"
)

function get_full_path
(
    target="$1"

    if [[ -f "${target}" ]]; then
        filename="${target##*/}"
        [[ "${filename}" == "${target}" ]] && \
            target="./${target}"
        target="${target%/*}"
        cd "${target}" || exit
        : "${PWD}/${filename}"
    elif [[ -d "${target}" ]]; then
        cd "${target}" || exit
        : "${PWD}"
    fi

    full_path="${_}"
    printf "%s" "${full_path%/}"
)

function get_module_dir
(
    if type -p readlink > /dev/null && [[ "${distro}" != "Windows" ]]; then
        : "$(readlink "${BASH_SOURCE[0]}")"
        : "${_%/*}/modules"
    else
        : "${HOME}/.dotfiles/bashrc/modules"
    fi
    printf "%s" "${_}"
)

function main
{
    distro="$(detect_os)"
    module_dir="$(get_module_dir)"

    modules=(
        "${module_dir}/colors"
        "${module_dir}/aliases"
        "${module_dir}/env_var"
        "${module_dir}/prompt"
    )

    ! type -p __load_completion > /dev/null && {
        if [[ -f "/usr/local/share/bash-completion/bash_completion" ]]; then
            modules+=("/usr/local/share/bash-completion/bash_completion")
        elif [[ -f "/usr/share/bash-completion/bash_completion" ]]; then
            modules+=("/usr/share/bash-completion/bash_completion")
        fi
    }

    for i in "${modules[@]}"; do
        secure_source "${i}"
    done
}

main
